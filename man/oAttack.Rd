% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oAttack.r
\name{oAttack}
\alias{oAttack}
\title{Function to perform targeted or combinatory attack for an igraph object}
\usage{
oAttack(
ig,
measure = c("degree", "betweenness", "prerank", "combine"),
nodes.prerank = NULL,
nodes.combine = NULL
)
}
\arguments{
\item{ig}{an object of class "igraph" with node attribute 'name'}

\item{measure}{how to perform attack analysis. This can be targeted
attack (nodes ranked by 'degree', 'betweenness' or preranked
('prerank')) or combinatorial attack 'comb'}

\item{nodes.prerank}{a vector containing nodes preranked for targeted
attack. Only works when measure is 'prerank'}

\item{nodes.combine}{a list containing nodes combined for combinatorial
attack. Only works when measure is 'combine'}
}
\value{
a tibble with 4 columns, including 'measure', 'frac.disconnected'
(fraction of network nodes disconnected from the giant component),
'frac.removed' (fraction of network nodes removed), 'nodes.removed'
(nodes removed, provided separated by ','), and 'i' for the number of
nodes removed.
}
\description{
\code{oAttack} is supposed to perform targeted or combinatory attack
for an igraph object, where the effect of node removal is defined as
the fraction of network nodes disconnected from the giant component
(the largest connected component) remained. There are two types of
attack analysis: removing a single node (accordingly we define the
attackness per a node), removing nodes sequentially (targeted attack:
Nodes ranked by for example betweenness centrality, and then the top
nodes successively removed to calculate the effect of node removal),
and removing nodes in combinations (combinatorial attack, often used
based on the concept of combinatorial optimisation). Also attackness
for a node is defined as the effect estimated when a single node
removed.
}
\note{
none
}
\examples{
\dontrun{
set.seed(825)
ig <- sample_pa(20)
V(ig)$name <- paste0('n',seq(1,vcount(ig)))

ig \%>\% oAttack(measure='betweenness')
ig \%>\% oAttack(measure='degree')

# attackness for single nodes
nodes.combine <- utils::combn(V(ig)$name, 1,simplify=F) ->
nodes.combine
ig \%>\% oAttack(measure='combine', nodes.combine=nodes.combine) ->
df_attackness
# targeted attack (sequential removal of nodes preranked by attackness)
nodes.prerank <- df_attackness \%>\% arrange(-frac.disconnected) \%>\%
pull(nodes.removed)
ig \%>\% oAttack(measure='prerank', nodes.prerank=nodes.prerank) ->
df_res

# combinatorial attack
# 1) given combinations
nodes.combine <- list(c('n1'),c('n1','n3','n5'))
ig \%>\% oAttack(measure='combine', nodes.combine=nodes.combine)
# 2) combinations for any twos
V(ig)$name \%>\% combn(2, simplify=F) -> nodes.combine
oAttack(ig, measure="combine", nodes.combine=nodes.combine) \%>\%
transmute(value=frac.disconnected, member=nodes.removed) -> data
data \%>\% arrange(-value) \%>\% top_n(5, value) \%>\%
oUpsetAdv(member.levels="num")
# 3) a series of optimal combinations
levels <- V(ig)$name
tibble(i=seq(3)) \%>\% mutate(combine=map(i,~levels \%>\% combn(.x,
simplify=F))) \%>\% mutate(res=map(combine, ~oAttack(ig,
measure="combine", nodes.combine=.x) \%>\%
select(frac.disconnected,nodes.removed) \%>\%
top_n(1,frac.disconnected))) \%>\% select(i,res) \%>\% unnest(res) ->
data
data \%>\% transmute(value=frac.disconnected, member=nodes.removed)
\%>\% oUpsetAdv(member.levels='customised',levels.customised=levels,
label.height.unit=6.5) + scale_y_continuous(limits=c(0,1)) +
geom_line(aes(group=i,color=as.factor(i))) +
geom_point(aes(fill=as.factor(i)), shape=22, size=2,
color="transparent")
# 4) optimal combinations in the context of predefined nodes
nodes_predefined <- c('n2','n5')
nodes_rest <- setdiff(V(ig)$name, nodes_predefined)
levels.customised <- c(nodes_predefined, nodes_rest)
tibble(i=seq(3)) \%>\% mutate(combine=map(i,~nodes_rest \%>\%
combn(.x,simplify=F) \%>\% lapply(function(y)
union(y,nodes_predefined)))) \%>\% mutate(res=map(combine, ~oAttack(ig,
measure="combine", nodes.combine=.x) \%>\%
select(frac.disconnected,nodes.removed) \%>\%
top_n(1,frac.disconnected))) \%>\% select(i,res) \%>\% unnest(res) ->
data
data \%>\% transmute(value=frac.disconnected, member=nodes.removed)
\%>\%
oUpsetAdv(member.levels='customised',levels.customised=levels.customised,
label.height.unit=6.5) + scale_y_continuous(limits=c(0,1)) +
geom_line(aes(group=i,color=as.factor(i))) +
geom_point(aes(fill=as.factor(i)), shape=22, size=2,
color="transparent")
}
}
\seealso{
\code{\link{oAttack}}
}
